package com.thealgorithms.dynamicprogramming;

/**
 * Kadaneâ€™s Algorithm:
 * Finds the maximum sum of a contiguous subarray within a one-dimensional array.
 * 
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 *
 * Example:
 * Input: [-2, 1, -3, 4, -1, 2, 1, -5, 4]
 * Output: 6  (subarray [4, -1, 2, 1])
 */
public class KadanesAlgorithm {

    /**
     * Returns the maximum subarray sum.
     *
     * @param arr input array
     * @return maximum subarray sum
     */
    public static int maxSubArraySum(int[] arr) {
        if (arr == null || arr.length == 0) {
            throw new IllegalArgumentException("Array must not be null or empty");
        }

        int maxSoFar = arr[0];
        int currentMax = arr[0];

        for (int i = 1; i < arr.length; i++) {
            // Compare current element with (current element + previous subarray)
            currentMax = Math.max(arr[i], currentMax + arr[i]);
            maxSoFar = Math.max(maxSoFar, currentMax);
        }

        return maxSoFar;
    }

    // Example usage
    public static void main(String[] args) {
        int[] nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
        System.out.println("Maximum Subarray Sum: " + maxSubArraySum(nums));
    }
}
